@model WebCourses.Models.Course
@using Microsoft.AspNetCore.Identity

@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager

@{
    ViewData["Title"] = "Details";
}

<h2>Details</h2><br />

<div>
    <h4>@Html.DisplayFor(model => model.Title)</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.User)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.User.Email)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Description)
        </dd>
    </dl>
</div>
@*<div>
        <a asp-action="Edit" asp-route-id="@Model.Id">Edit</a> |
        <a asp-action="Index">Back to List</a>
    </div>*@
@if (SignInManager.IsSignedIn(User) && await UserManager.IsInRoleAsync(await UserManager.GetUserAsync(User), "Teacher"))
{
    <br>
    <h5><b>Students:</b> </h5>
    <ul class="list-group">
        @foreach (var courseUser in @Model.CourseUsers)
        {
            @if (courseUser.Confirmed == true)
            {
                <a asp-action="Details" asp-controller="Students" asp-route-courseId="@Model.Id" asp-route-studentId="@courseUser.UserId" class="list-group-item list-group-item-action flex-column align-items-start">
                    @courseUser.User.Email
                </a>
            }
        }
    </ul>

    <h5><b>Not confirmed students: </b></h5>
    @foreach (var courseUser in @Model.CourseUsers)
    {
        @if (courseUser.Confirmed == false)
        {
            <form class="form-inline" method="post" action="/Courses/Confirm">
                <input type="hidden" value="@Model.Id" name="courseId" />
                <input type="hidden" value="@courseUser.UserId" name="userId" />
                <label class="mr-sm-2 text-primary" for="confirmation">@courseUser.User.Email</label>
                <select id="confirmation" class="form-control" name="confirmation">
                    <option value="false">Reject</option>
                    <option value="true">Confirm</option>
                </select>
                <button type="submit" class="btn btn-primary align-right">
                    Press
                </button>
            </form>
            <br />
        }
    }
    <a asp-action="Index" asp-controller="Tests" asp-route-courseId="@Model.Id" class="btn btn-primary pull-right">Manage tests</a>
    <br />

}

@if (SignInManager.IsSignedIn(User) && await UserManager.IsInRoleAsync(await UserManager.GetUserAsync(User), "Student"))
{
    @if (Model.CourseUsers.Where(cu => cu.UserId == @UserManager.GetUserId(User)).First().Confirmed == false)
    {
        <strong>You are not confirmed</strong>
    }
    else
    {
        <strong>Available tests: </strong>
        @foreach (var test in Model.Tests)
        {
            var today = DateTime.Now.ToLocalTime();
            var deadline = test.Deadline.HasValue ? test.Deadline.Value : DateTime.MaxValue;
            var release = test.ReleaseDate.HasValue ? test.ReleaseDate.Value : DateTime.MaxValue;
            if (deadline > today && release < today)
            {
                <li>
                    <strong>@test.Name</strong>
                    @*@if (DB::table('user_points')->where('user_id', Auth::id())->where('test_id', $test->id)->value('finished') == true)
                     Points: { { DB::table('user_points')->where('user_id', Auth::id())->where('test_id', $test->id)->value('points')} }
                    / { {$test->questions()->count()} }
                    @else*@
                    <a asp-action="Solve" asp-controller="Tests" asp-route-courseId="@Model.Id" asp-route-testId="@test.Id">Solve - WERKA ZERKNIJ DO KODU!!!! Views/Courses/Details tam masz, że powinny być wyświetlane punkty, jeśli rozwiązane</a>
                    @*@endif*@
                </li>
            }

        }
    }
}