@model WebCourses.Models.Question
@using Microsoft.AspNetCore.Identity

@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit</h2>

<h4>Question</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        @if (SignInManager.IsSignedIn(User) && await UserManager.IsInRoleAsync(await UserManager.GetUserAsync(User), "Teacher"))
        {
            <form asp-action="Edit">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="Id" />
                <div class="form-group">
                    <label asp-for="Content" class="control-label"></label>
                    <input asp-for="Content" class="form-control" />
                    <span asp-validation-for="Content" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Type" class="control-label"></label>
                    @*<select asp-for="Type" class="form-control"></select>*@
                    <input asp-for="Type" class="form-control" value="@Model.Type" readonly />
                    <span asp-validation-for="Type" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="AnswersCount" class="control-label"></label>
                    <input asp-for="AnswersCount" class="form-control" readonly />
                    <span asp-validation-for="AnswersCount" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="CorrectAnswersCount" class="control-label"></label>
                    <input asp-for="CorrectAnswersCount" class="form-control" readonly />
                    <span asp-validation-for="CorrectAnswersCount" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <input type="submit" value="Save question" class="btn btn-default" />
                </div>
            </form>

            @*@switch (Model.Type)
                {
                    case (Question.QuestionType.SingleAnswer):
                        @if (Model.Answers.Any()) {
                            <p>Click to edit answer:</p>
                            @foreach (var answer in Model.Answers) {
                                <div class="list-group">
                                    <p>Tutaj wyświetlane odpowiedzi z możliwością ich edycji. Może partial view??</p>
                                </div>
                            }
                        }
                        <a asp-action="Create" asp-controller="Answers" asp-route-courseId="@ViewContext.RouteData.Values["courseId"]" asp-route-testId="@ViewContext.RouteData.Values["testId"]" asp-route-questionId="@ViewContext.RouteData.Values["questionId"]" class="btn btn-primary pull-right" role="button">Add answer</a>
                        break;
                }*@

        }
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>
@if (Model.Type == Question.QuestionType.MultipleAnswer || Model.Type == Question.QuestionType.SingleAnswer)
{
    @await Html.PartialAsync("_AnswersList", Model.Answers)
    <a asp-action="Create" asp-controller="Answers" asp-route-courseId="@ViewContext.RouteData.Values["courseId"]" asp-route-testId="@ViewContext.RouteData.Values["testId"]" asp-route-questionId="@ViewContext.RouteData.Values["questionId"]" class="btn btn-primary pull-right" role="button">Add answer</a>
}

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
