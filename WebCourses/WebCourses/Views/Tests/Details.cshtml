@model WebCourses.Models.Test
@using Microsoft.AspNetCore.Identity
@using WebCourses.Data;

@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@inject ApplicationDbContext _context

@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Details</h2><br />

@if (SignInManager.IsSignedIn(User) && await UserManager.IsInRoleAsync(await UserManager.GetUserAsync(User), "Teacher"))
{
    double maxScore = Model.Questions.Count;
    var testResults = _context.UserTestResults.Where(result => result.TestId == Model.Id);
    var checkedTestResult = testResults.Where(tr => tr.Checked);
    var avarageTestResult = checkedTestResult.Sum(result => result.PointsCount) / (maxScore * checkedTestResult.Count()) * 100;
    bool anyIncomplete = testResults.Any(result => !result.Checked);
    <div>
        <h4>@Html.DisplayFor(model => model.Name)</h4>
        <hr />
        <dl class="dl-horizontal">
            <dt>
                @Html.DisplayNameFor(model => model.Description)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Description)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.ReleaseDate)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.ReleaseDate)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Deadline)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Deadline)
            </dd>
            <dt>
                @Html.DisplayName("Participants")
            </dt>
            <dd>
                @testResults.Count().ToString()
            </dd>
            <dt>
                @Html.DisplayName("Avarage result")
            </dt>
            <dd>
                @if (checkedTestResult.Count() != 0)
                {
                    @*<div class="col-lg-6">*@
                    <div class="progress">
                        <div class="progress-bar bg-success" role="progressbar" style="width: @Math.Round(avarageTestResult)%" aria-valuenow=@Math.Round(avarageTestResult) aria-valuemin="0" aria-valuemax="100">@Math.Round(avarageTestResult, 2)%</div>
                    </div>
                    @*</div>*@
                }
                @if (anyIncomplete)
                {
                    <text> (open questions wait for your mark) </text>
                }
            </dd>
        </dl>
        <hr />
        <form asp-action="Edit" asp-controller="Tests" asp-route-courseId="@Model.CourseId" asp-route-testId="@Model.Id">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <input type="hidden" asp-for="Name" class="form-control" />
            <input type="hidden" asp-for="Description" class="form-control" />
            <div class="form-group">
                <label asp-for="ReleaseDate" class="control-label col-md-1"></label>
                <div class="col-md-3">
                    <input asp-for="ReleaseDate" class="form-control" />
                    <span asp-validation-for="ReleaseDate" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group">
                <label asp-for="Deadline" class="control-label col-md-1"></label>
                <div class="col-md-3">
                    <input asp-for="Deadline" class="form-control" />
                    <span asp-validation-for="Deadline" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group">
                <input type="submit" value="Share test" class="btn btn-default" />
            </div>
        </form>
    </div>

    <hr />
    <h5><b>Checking answers for open questions:</b></h5>
    @foreach (var question in Model.Questions)
    {
        @if (question.Type == Question.QuestionType.Open)
        {
            var openAnswers = _context.OpenQuestionAnswers
                .Where(answer => answer.QuestionId == question.Id);

            @foreach (var answer in openAnswers)
            {

                @if (!answer.Checked)
                {
                    <div class="list-group">
                        <div class="list-group-item list-group-item-action">
                            <strong>@question.Content</strong>
                            <div class="list-group-item" style="background-color:rgba(255,255,255,0);">
                                @answer.Content
                                <a asp-action="Mark" asp-controller="OpenQuestionAnswers" asp-route-courseId="@Model.CourseId" asp-route-testId="@Model.Id" asp-route-answerId="@answer.Id" asp-route-correct="false" class="btn btn-danger pull-right" role="button">
                                    Incorrect
                                </a>
                                <a asp-action="Mark" asp-controller="OpenQuestionAnswers" asp-route-courseId="@Model.CourseId" asp-route-testId="@Model.Id" asp-route-answerId="@answer.Id" asp-route-correct="true" class="btn btn-success pull-right" role="button">
                                    Correct
                                </a>
                            </div>
                        </div>
                    </div>
                }
            }
        }
    }

    <br />
    <br />
    var today = DateTime.Now.ToLocalTime();
    var deadline = Model.Deadline.HasValue ? Model.Deadline.Value : DateTime.MaxValue;
    var release = Model.ReleaseDate.HasValue ? Model.ReleaseDate.Value : DateTime.MaxValue;
    if (deadline >= today && release>=today)
    {
        <a asp-action="Edit" asp-controller="Tests" asp-route-testId="@Model.Id" asp-route-courseId="@Model.CourseId" class="btn btn-primary pull-right">Edit test</a>
    }
    <a asp-action="Index"> Come back to course</a>
}
