@model WebCourses.Models.Test
@using Microsoft.AspNetCore.Identity
@using WebCourses.Data;

@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@inject ApplicationDbContext _context

@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Statistics of a test</h2><br />

@if (SignInManager.IsSignedIn(User) && await UserManager.IsInRoleAsync(await UserManager.GetUserAsync(User), "Teacher"))
{
    double maxScore = Model.Questions.Count;
    var testResults = _context.UserTestResults.Where(result => result.TestId == Model.Id);
    var avarageTestResult = testResults.Sum(result => result.PointsCount) / maxScore * 100;
    bool anyIncomplete = testResults.Any(result => result.Checked == false);
    <div>
        <h4>@Html.DisplayFor(model => model.Name)</h4>
        <hr />
        <dl class="dl-horizontal">
            <dt>
                @Html.DisplayNameFor(model => model.Description)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Description)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.ReleaseDate)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.ReleaseDate)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Deadline)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Deadline)
            </dd>
            <dt>
                @Html.DisplayName("Participants")
            </dt>
            <dd>
                @testResults.Count().ToString()
            </dd>
            <dt>
                @Html.DisplayName("Avarage result")
            </dt>
        </dl>
        <div class="progress">
            <div class="progress-bar bg-success" role="progressbar" style="width: @avarageTestResult%" aria-valuenow=@avarageTestResult aria-valuemin="0" aria-valuemax="100"> @avarageTestResult% </div>
            @if (anyIncomplete)
            {
                <text> open questions wait for your mark </text>
            }
        </div>
        Tutaj powinnam dodać jeszcze edycję testu, tzn. dat plus możliwość udostępniania
    </div>

    <br /><br />
    <hr />
    <h5><b>Checking answers for open questions:</b></h5>
    @foreach (var question in Model.Questions)
    {
        @if (question.Type == Question.QuestionType.Open)
        {
            var openAnswers = _context.OpenQuestionAnswers
                .Where(answer => answer.QuestionId == question.Id);
            <div class="list-group">
                @foreach (var answer in openAnswers)
                {
                    @if (!answer.Checked)
                    {
                        <strong>@question.Content</strong>
                        <div class="list-group-item">
                            @answer.Content
                            <a asp-action="Mark" asp-controller="OpenQuestionAnswers" asp-route-courseId="@Model.CourseId" asp-route-testId="@Model.Id" asp-route-answerId="@answer.Id" asp-route-correct="false" class="btn btn-danger pull-right" role="button">
                                Incorrect
                            </a>
                            <a asp-action="Mark" asp-controller="OpenQuestionAnswers" asp-route-courseId="@Model.CourseId" asp-route-testId="@Model.Id" asp-route-answerId="@answer.Id" asp-route-correct="true" class="btn btn-success pull-right" role="button">
                                Correct
                            </a>
                        </div>
                    }
                }
            </div>
        }
    }

    <br />
    <br />
    <a asp-action="Edit" asp-controller="Tests" asp-route-testId="@Model.Id" asp-route-courseId="@Model.CourseId" class="btn btn-primary pull-right">Edit test</a>
    <a asp-action="Index"> Come back to course</a>
}
